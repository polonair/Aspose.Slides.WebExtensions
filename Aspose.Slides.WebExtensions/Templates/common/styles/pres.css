@model TemplateContext<Presentation> 

@{
    IFontData[] fonts = Model.Object.FontsManager.GetEmbeddedFonts();
    foreach (var font in fonts) 
    {
        <text>@@font-face
        {
            font-family: "@font.FontName";
            src: url("@FontHelper.GetEmbeddedFontUrl(font, FontStyle.Regular)");
        }
        </text>
    }
      
      var fixSlides = Model.Global.Get<bool>("animateTransitions") || Model.Global.Get<bool>("navigationEnabled");      
      var margin = Model.Global.Get<int>("slideMargin");
      var notesType = Model.Global.ContainsKey("notesPosition") ? Model.Global.Get<string>("notesPosition") : null;
      var hasNotes = (notesType != null) && (notesType != "None");
}

    body, html {
        height: 100%;
    }

    body {
        margin: 0 !important;
        padding: 0 !important;
        background-color: #e6e6e6;
    }

    .bg {
            @(fixSlides ? "width: " + (Model.Object.SlideSize.Size.Width + margin * 2) + "px;" : "")
            @(fixSlides ? "height: " + (Model.Object.SlideSize.Size.Height + margin * 2) + "px;" : "")
            @(fixSlides ? "overflow: hidden;" : "")
            @(fixSlides ? "position: fixed;" : "")
    }
    
    .slide {
        width: @((Model.Object.SlideSize.Size.Width + margin / 2) + "px");
        height: @((Model.Object.SlideSize.Size.Height + margin / 2) + "px");
        outline: 1px solid #c6c6c6;
        overflow: hidden;
        margin: @(margin + "px");
        @(fixSlides ? "position: absolute;" : "")
    }

    @if(hasNotes)
    {
        <text>
        .notes {
            width: @((Model.Object.NotesSize.Size.Width + margin / 2) + "px");
            height: @((Model.Object.NotesSize.Size.Height + margin / 2) + "px");
            outline: 1px solid #c6c6c6;
            overflow: hidden;
            margin: @(margin + "px");
            @(fixSlides ? "position: absolute;" : "")
        }
        </text>
    }
    
    .navigationArea {
        float: left; 
        width: 240px; 
        height: 100%; 
        overflow-y: auto;
    }
    
    .navigationAreaBorder {
        border-right: solid #777777 1px;
    }
    
    .navigationSelected {
        background: #d24726;
    }
    
    .slideThumb {
        margin: 10px; 
        margin-bottom: 5px;
        padding: 5px;
        padding-bottom: 1px;
        cursor: pointer;
    }

    .slide-content {
        
    }

    .shape {
        position: absolute;
    }

    .table {
        position: absolute;
        border-collapse: collapse;
    }

    .paragraph {
        position: absolute;
    }

    .pictureframe {
        position: absolute;
    }

    .thumbnail {
        margin: @(Model.Global.Get<int>("slideMargin") + "px");
        margin-top: @(Model.Global.Get<int>("slideMargin") + "px");
    }
      
    .navigationButton {
        position: absolute;
        width: 100px;
        height: 50px;
        border: solid black 1px;
        text-align: center;
        vertical-align: middle;
        line-height: 50px;
        display: none;
        cursor: pointer;
    }
    
    #svgdiv, #svgdivpaths {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: -100;
    }